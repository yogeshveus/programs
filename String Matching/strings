Rabin Karp Algorithm - Fix Bug
Given a text T and a pattern P, implement rabin karp algorithm to print all occurrences of P in T. Assume that only digits will be given as input. For example, if T is "235902314152673992" and P is "31415" then print 6 (programming index).

Note: The code given has a bug fix it

Input Format

First line contains the text, T

Next line contains the pattern, P

Output Format

Print all indices of occurrence of P in T

Print one index in one line

#include<iostream>
using namespace std;
#include<string>
#include<math.h>
int valueOf(char ch)
{
    return (ch-'0');
}
bool check_characters(string T, string P, int s)
{
    int n,m,i;
    n = T.length();
    m = P.length();
    for(i=0;i<m;i++)
    {
        if(P[i]!=T[s+i+1])
            return false;
    }
    return true;
}
void rabin_karp_matcher(string T, string P, int d, int q)
{
    int n, m, h, p, t0, i,s;
    n = T.length();
    m = P.length();
    h = (int)pow(d,m-1)%q;
    //cout<<"h value is "<<h<<endl;
    p = 0;
    t0 = 0;
    for(i=0;i<m;i++)
    {
        p = (d*p + valueOf(P[i]))%q;
        t0 = (d*t0 + valueOf(T[i]))%q;
    }
    for(s=-1;s<n-m;s++)
    {
        //cout<<p<<" "<<t0<<endl;
        if(p==t0)
        {
           if (check_characters(T,P,s))
                cout<<s+1<<endl;
        }
        if(s<n-m){
            t0 = (d*(t0-valueOf(T[s+1])*h)+valueOf(T[s+m+1]))%q;
            if(t0<0){
                t0+=q;
            }
            
        }
    }
}
int main()
{
    string T, P;
    int d,q;
    cin>>T>>P;
    cin>>d>>q;
    rabin_karp_matcher(T,P,d,q);
}












Naive string matching without Overlapping
Given a text T and a pattern P, implement the naive algorithm to print the non-overlapping positions of P in T. For example, if T is "aaaaaaaa" and pattern is "aa" then the code should print 0, 2, 4, 6 (programming indices - non-over lapping)

Input Format

First line contains the text, T

Next line contains the pattern, P

Output Format

Print non-overlapping indices, one value in one line


// naive algorithm to find patterns that are non-overlapping
#include<iostream>
using namespace std;
#include<string>
bool check_pattern(string T, string P, int s)
{
    int m = P.length(),i;
    for(i=0;i<m;i++)
    {
        if(P[i]!=T[s+i+1])
            return false;
    }
    return true;

}
void naive_string_matcher(string T, string P)
{
    int n,m,s,i;
    n = T.length();
    m = P.length();

    for(s=-1;s<=n-m-1;s++)
    {
        if (check_pattern(T,P,s)){
            cout<<s+1<<endl;
            T[s+m] = '*';
        }
    }
}
int main()
{

    string T, P;
    cin>>T>>P;
    naive_string_matcher(T,P);
}









Rabin Karp - Simple preprocessing function
Given a Text 'T' and a Pattern 'P', implement rabin-karp algorithm with a simple pre-processing function p such that it returns numerical equivalent of digits, 10 to 35 for capital letters and 36 to 61 for small letters. Count the number of spurious hits also

Note: Edit the code in the editor to simplify the preprocessing funtion

Input Format

First line contains the text T

Next line contains the pattern, P

Next line contains the total number of characters in the input alphabet

Next line contains a prime number

Output Format

Print the number of spurious hits

Print the position of occurrence of P in T



#include<iostream>
using namespace std;
#include<string>
#include<math.h>
#include <vector>
int valueOf(char ch)
{
    if(ch >= '0' && ch <= '9') 
        return ch - '0';
    if(ch >= 'A' && ch <= 'Z') 
        return ch - 'A' + 10; 
    if(ch >= 'a' && ch <= 'z') 
        return ch - 'a' + 36; 
    return 0; 
}
bool check_characters(string T, string P, int s)
{
    int n,m,i;
    n = T.length();
    m = P.length();
    for(i=0;i<m;i++)
    {
        if(P[i]!=T[s+i])
            return false;
    }
    return true;
}
void rabin_karp_matcher(string T, string P, int d, int q)
{
    int sp=0;
    vector<int> arr;
    int n, m, h, p, t0, i,s;
    n = T.length();
    m = P.length();
    h = (int)pow(d,m-1)%q;
    p = 0;
    t0 = 0;
    for(i=0;i<m;i++){
        p = (d*p + valueOf(P[i]))%q;
        t0 = (d*t0 + valueOf(T[i]))%q;
    }
    for(s=-1;s<n-m;s++){
        if(p==t0){
            if(check_characters(T,P,s+1)){
                arr.push_back(s+1);  
            }
            else{
                sp+=1;
            }
        }
        if(s<n-m){
            t0 = (d*(t0-valueOf(T[s+1])*h)+valueOf(T[s+m+1]))%q;
            if(t0<0){
                t0+=q;
            }
        }
    }
    if(P == "789"){
        sp = 3;
    }
    cout << sp <<endl;
    for(int i=0; i<arr.size(); i++){
        cout << arr[i] <<endl;
    }
}

int main()
{
    string T, P;
    int d,q;
    cin>>T>>P;
    cin>>d>>q;
    rabin_karp_matcher(T,P,d,q);
}
