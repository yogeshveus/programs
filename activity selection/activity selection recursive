Activity Selection Sort Recursive
Given a set ‘S’ of ‘n’ activities, implement the recursive greedy algorithm to select a subset of activities from S by selecting the task that finishes first. Sort the activities in ascending order based on finsih time and then select the activities

Input Format

First line contains the number of activities, n

Next 'n' line contains the details of the activities such as name of activity, start time and finish time

Output Format

Print the name of the activities that are selected separated by a space





#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;

struct activity{
    int start, finish;
    string name;
};

struct compare {
    bool operator()(const activity &a, const activity &b) {
        return a.finish > b.finish; 
    }
};

void recurse(priority_queue<activity, vector<activity>, compare> &pq, vector<activity> &selected){
    if(pq.empty()) return;
    
    activity current = pq.top();
    pq.pop();
    selected.push_back(current);

    
    while (!pq.empty() && pq.top().start < current.finish) {
        pq.pop();
    }
    
    recurse(pq, selected);
}

int main(){
    int n;
    cin>>n;
    priority_queue<activity, vector<activity>, compare> pq;
    vector<activity> selected;
    vector<activity> arr(n);
    for (int i = 0; i < n; i++) {
        activity a;
        cin >> a.name >> a.start >> a.finish;
        pq.push(a);
    }

    recurse(pq, selected);
    
    for (const auto &a : selected) {
        cout << a.name << " ";
    }
    cout << endl;
}
